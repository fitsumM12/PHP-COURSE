Variables
Variables are containers to store data inside it.

Variable can be created by starting with the $ sign, followed by the name of the variable:
Example
<?php
$txt = "Hello Ethio Programming Followers!";
$x = 5;
$y = 10.5;
?> 

Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.

PHP Variables
A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).
Rules for PHP variables:
    After the $ sign, a variable starts with the $ sign, followed by the name of the variable
    After the $ sign, a variable name must start with a letter or the underscore character
    After the $ sign, a variable name cannot start with a number
    After the $ sign, a variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
    Variable names are case-sensitive ($age and $AGE are two different variables)
	
	Output Variables
The PHP echo statement is often used to output data to the screen.
The following example will show how to output text and a variable:
Example
<?php
$txt = "Ethio Programming";
echo "I am following $txt!";
?> 


PHP is a Loosely Typed Language
In the example above, notice that we did not have to tell PHP which data type the variable is.
PHP automatically converts the variable to the correct data type, depending on its value.
In other languages such as C, C++, and Java, the programmer must declare the name and type of the variable before using it.


PHP Variables Scope
In PHP, variables can be declared anywhere in the script.
The scope of a variable is the part of the script where the variable can be referenced/used.
PHP has three different variable scopes:
    local
    global
    static

	Global and Local Scope
A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:
You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.


PHP The global Keyword

The global keyword is used to access a global variable from within a function.

To do this, use the global keyword before the variables (inside the function):
Example
<?php
$x = 5;
$y = 10;

function myTest() {
    global $x, $y;
    $y = $x + $y;
}

myTest();
echo $y; // outputs 15
?> 

PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.

The example above can be rewritten like this:
Example
<?php
$x = 5;
$y = 10;

function myTest() {
    $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];
}

myTest();
echo $y; // outputs 15
?> 

PHP The static Keyword
Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.

To do this, use the static keyword when you first declare the variable:
Example
<?php
function myTest() {
    static $x = 0;
    echo $x;
    $x++;
}

myTest();
myTest();
myTest();
?> 


Then, each time the function is called, that variable will still have the information it contained from the last time the function was called. But the variable is still local to the function.